# 使用預構建映像的生產環境配置（快速部署）
# 映像由 GitHub Actions 自動構建並推送到 GHCR
# Note: Docker Compose V2 不再需要 version 屬性

services:
  # 使用 MongoDB Atlas 雲端資料庫，不需要本地 MongoDB 容器
  # DATABASE_URL 從 .env.production 中讀取

  # Redis 緩存
  redis:
    image: redis:7-alpine
    container_name: heart-whisper-redis
    restart: unless-stopped
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    networks:
      - heart-whisper-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # 後端 API（使用預構建映像）
  backend:
    image: ghcr.io/nrps9909/tahrd-graduation-project/backend:latest
    container_name: heart-whisper-backend
    restart: unless-stopped
    env_file:
      - .env.production
    environment:
      - NODE_ENV=production
      - REDIS_URL=redis://redis:6379
      # DATABASE_URL 從 .env.production 中讀取（MongoDB Atlas）
      # Node.js 記憶體限制：在 1.2G 容器中，Node 最多使用 900MB
      - NODE_OPTIONS=--max-old-space-size=900
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - ./backend/memories:/app/memories
      - ./backend/logs:/app/logs
    networks:
      - heart-whisper-network
    # 記憶體限制設定（防止 OOM）
    # Digital Ocean 2GB Droplet: 後端限制為 1.2G，為系統和其他容器留出空間
    deploy:
      resources:
        limits:
          memory: 1200M
        reservations:
          memory: 256M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # 前端應用（使用預構建映像）
  frontend:
    image: ghcr.io/nrps9909/tahrd-graduation-project/frontend:latest
    container_name: heart-whisper-frontend
    restart: unless-stopped
    env_file:
      - .env.production
    depends_on:
      - backend
    networks:
      - heart-whisper-network
    # 記憶體限制設定
    # Digital Ocean 2GB Droplet: 前端限制為 300M
    deploy:
      resources:
        limits:
          memory: 300M
        reservations:
          memory: 64M

  # Nginx 反向代理
  nginx:
    image: nginx:alpine
    container_name: heart-whisper-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - frontend
      - backend
    networks:
      - heart-whisper-network
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 3s
      retries: 3

volumes:
  redis_data:
    driver: local

networks:
  heart-whisper-network:
    driver: bridge


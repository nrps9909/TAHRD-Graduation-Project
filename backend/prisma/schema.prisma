// Heart Whisper Town - Personal AI Knowledge Assistant
// MongoDB Schema for Multi-Agent System

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// ============ Core Models ============

model User {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  username     String   @unique
  email        String   @unique
  passwordHash String   @map("password_hash")

  // Profile
  displayName  String?  @map("display_name")
  avatarUrl    String?  @map("avatar_url")

  // Status
  isActive     Boolean  @default(true) @map("is_active")
  lastLogin    DateTime? @map("last_login")

  // Timestamps
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relations
  memories     Memory[]
  chatMessages ChatMessage[]
  chatSessions ChatSession[]
  settings     UserSettings?
  islands      Island[]
  subcategories Subcategory[]

  @@map("users")
}

model UserSettings {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  userId            String   @unique @map("user_id") @db.ObjectId

  // Preferences
  theme             String   @default("light")
  language          String   @default("zh-TW")
  defaultView       String   @default("island") @map("default_view") // "island" or "database"

  // Notifications
  emailNotifications Boolean @default(true) @map("email_notifications")

  // Privacy
  dataRetentionDays Int     @default(365) @map("data_retention_days")

  updatedAt         DateTime @updatedAt @map("updated_at")

  // Relations
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_settings")
}

// ============ Assistant Models ============

enum AssistantType {
  CHIEF      // 總管（智能分配 + 全局摘要）
  LEARNING   // 學習筆記
  INSPIRATION // 靈感創意
  WORK       // 工作事務
  SOCIAL     // 人際關係
  LIFE       // 生活記錄
  GOALS      // 目標規劃
  RESOURCES  // 資源收藏

  @@map("assistant_type")
}

model Assistant {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId

  // Identity
  type             AssistantType @unique
  name             String   @unique
  nameChinese      String   @map("name_chinese")
  emoji            String
  color            String   // Hex color code

  // AI Configuration
  systemPrompt     String   @map("system_prompt") @db.String
  personality      String   @db.String
  chatStyle        String   @map("chat_style") @db.String

  // 3D Position (for Island View)
  positionX        Float    @default(0) @map("position_x")
  positionY        Float    @default(0) @map("position_y")
  positionZ        Float    @default(0) @map("position_z")

  // 3D Model & Texture (for Island Customization)
  modelUrl         String?  @map("model_url") // Custom 3D model URL (GLTF/GLB)
  textureId        String?  @map("texture_id") // Selected texture ID
  shape            String?  @default("circle") // Island shape: circle, hexagon, square, organic, etc.
  customShapeData  String?  @map("custom_shape_data") @db.String // JSON string of custom drawn shape points
  islandHeight     Float?   @default(2.0) @map("island_height") // Island height (0.5-5.0)
  islandBevel      Float?   @default(0.5) @map("island_bevel") // Island edge bevel/slope (0-2.0)

  // Statistics
  totalMemories    Int      @default(0) @map("total_memories")
  totalChats       Int      @default(0) @map("total_chats")

  // Status
  isActive         Boolean  @default(true) @map("is_active")

  // Timestamps
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  // Relations
  memories         Memory[]
  chatMessages     ChatMessage[]
  chatSessions     ChatSession[]

  @@map("assistants")
}

// ============ Memory System ============

enum ContentType {
  TEXT
  IMAGE
  DOCUMENT
  LINK
  MIXED

  @@map("content_type")
}

model Memory {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  userId           String   @map("user_id") @db.ObjectId
  assistantId      String?  @map("assistant_id") @db.ObjectId  // Optional: null for dynamic SubAgents

  // 新的分類系統（可選，向後兼容）
  subcategoryId    String?  @map("subcategory_id") @db.ObjectId

  // Content
  rawContent       String   @map("raw_content") @db.String
  summary          String?  @db.String
  contentType      ContentType @default(TEXT) @map("content_type")

  // Files (images, PDFs, etc.)
  fileUrls         String[] @default([]) @map("file_urls")
  fileNames        String[] @default([]) @map("file_names")
  fileTypes        String[] @default([]) @map("file_types")

  // Links
  links            String[] @default([]) // URLs
  linkTitles       String[] @default([]) @map("link_titles") // Titles for each link

  // AI Processing
  keyPoints        String[] @map("key_points")
  aiSentiment      String?  @map("ai_sentiment") // positive, neutral, negative
  aiAnalysis       String?  @map("ai_analysis") @db.String // Gemini's analysis
  rawData          String?  @map("raw_data") @db.String // Original user-AI conversation

  // Classification
  category         AssistantType
  tags             String[] // 自動生成的標籤

  // Metadata
  title            String?  // 自動生成或用戶編輯
  emoji            String?  // 代表這條記憶的 emoji

  // Relations (Memory Links)
  relatedMemoryIds String[] @map("related_memory_ids") @db.ObjectId

  // Distribution Info (if from Chief Agent)
  distributionId   String?  @map("distribution_id") @db.ObjectId
  relevanceScore   Float?   @map("relevance_score") // 0-1

  // Status
  isArchived       Boolean  @default(false) @map("is_archived")
  isPinned         Boolean  @default(false) @map("is_pinned")

  // Timestamps
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")
  archivedAt       DateTime? @map("archived_at")

  // Relations
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  assistant        Assistant? @relation(fields: [assistantId], references: [id], onDelete: Cascade)
  subcategory      Subcategory? @relation(fields: [subcategoryId], references: [id], onDelete: SetNull)
  chatMessages     ChatMessage[]
  distribution     KnowledgeDistribution? @relation(fields: [distributionId], references: [id])

  @@index([userId, category])
  @@index([userId, createdAt])
  @@index([userId, assistantId])
  @@index([userId, subcategoryId])
  @@index([tags])
  @@index([distributionId])
  @@map("memories")
}

// ============ Chat System ============

// Chat Session - 類似 ChatGPT 的會話管理
model ChatSession {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  userId           String   @map("user_id") @db.ObjectId
  assistantId      String   @map("assistant_id") @db.ObjectId

  // Session Info
  title            String   @default("新對話") // 自動生成或用戶編輯

  // Metadata
  messageCount     Int      @default(0) @map("message_count")
  totalTokens      Int      @default(0) @map("total_tokens")

  // Status
  isArchived       Boolean  @default(false) @map("is_archived")
  isPinned         Boolean  @default(false) @map("is_pinned")

  // Timestamps
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")
  lastMessageAt    DateTime @default(now()) @map("last_message_at")
  archivedAt       DateTime? @map("archived_at")

  // Relations
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  assistant        Assistant @relation(fields: [assistantId], references: [id], onDelete: Cascade)
  messages         ChatMessage[]

  @@index([userId, updatedAt(sort: Desc)])
  @@index([userId, assistantId])
  @@index([userId, isPinned, updatedAt(sort: Desc)])
  @@map("chat_sessions")
}

model ChatMessage {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  userId           String   @map("user_id") @db.ObjectId
  assistantId      String   @map("assistant_id") @db.ObjectId
  sessionId        String   @map("session_id") @db.ObjectId // 關聯到會話

  // Content
  userMessage      String   @map("user_message") @db.String
  assistantResponse String  @map("assistant_response") @db.String

  // Context
  memoryId         String?  @map("memory_id") @db.ObjectId
  contextType      ChatContextType @map("context_type")

  // Metadata
  tokenCount       Int?     @map("token_count")
  processingTime   Float?   @map("processing_time") // ms

  // Timestamps
  createdAt        DateTime @default(now()) @map("created_at")

  // Relations
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  assistant        Assistant @relation(fields: [assistantId], references: [id], onDelete: Cascade)
  session          ChatSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  memory           Memory?  @relation(fields: [memoryId], references: [id], onDelete: SetNull)

  @@index([sessionId, createdAt])
  @@index([userId, assistantId])
  @@index([userId, createdAt])
  @@map("chat_messages")
}

enum ChatContextType {
  MEMORY_CREATION  // 創建新記憶
  MEMORY_QUERY     // 查詢記憶
  GENERAL_CHAT     // 一般對話
  SUMMARY_REQUEST  // 請求摘要（Chief Agent）
  CLASSIFICATION   // 分類請求（Chief Agent）

  @@map("chat_context_type")
}

// ============ Tag System ============

model Tag {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId

  // Identity
  name             String   @unique
  nameChinese      String?  @map("name_chinese")

  // Statistics
  usageCount       Int      @default(0) @map("usage_count")

  // Metadata
  color            String?  // Optional color for tag cloud
  category         AssistantType? // Which assistant this tag commonly belongs to

  // Timestamps
  createdAt        DateTime @default(now()) @map("created_at")
  lastUsed         DateTime @default(now()) @map("last_used")

  @@map("tags")
}

// ============ Knowledge Distribution System ============

model KnowledgeDistribution {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  userId           String   @map("user_id") @db.ObjectId

  // Original Content
  rawContent       String   @map("raw_content") @db.String
  contentType      ContentType @map("content_type")

  // Files
  fileUrls         String[] @default([]) @map("file_urls")
  fileNames        String[] @default([]) @map("file_names")
  fileTypes        String[] @default([]) @map("file_types")

  // Links
  links            String[] @default([])
  linkTitles       String[] @default([]) @map("link_titles")

  // Chief Agent Analysis
  chiefAnalysis    String   @map("chief_analysis") @db.String
  chiefSummary     String   @map("chief_summary") @db.String
  identifiedTopics String[] @map("identified_topics")
  suggestedTags    String[] @map("suggested_tags")

  // Distribution Results
  distributedTo    String[] @map("distributed_to") // Assistant IDs
  storedBy         String[] @default([]) @map("stored_by") // Assistant IDs that chose to store

  // Processing Info
  processingTime   Float?   @map("processing_time") // ms
  tokenCount       Int?     @map("token_count")

  // Timestamps
  createdAt        DateTime @default(now()) @map("created_at")

  // Relations
  agentDecisions   AgentDecision[]
  memories         Memory[]

  @@index([userId, createdAt])
  @@map("knowledge_distributions")
}

model AgentDecision {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  distributionId   String   @map("distribution_id") @db.ObjectId
  assistantId      String?  @map("assistant_id") @db.ObjectId  // Optional: null for dynamic SubAgents

  // Decision
  relevanceScore   Float    @map("relevance_score") // 0-1
  shouldStore      Boolean  @map("should_store")
  reasoning        String   @db.String
  confidence       Float    // 0-1

  // Classification (if stored)
  suggestedCategory AssistantType? @map("suggested_category")
  suggestedTags    String[] @map("suggested_tags")
  keyInsights      String[] @map("key_insights")

  // Processing Info
  processingTime   Float?   @map("processing_time") // ms

  // Timestamp
  createdAt        DateTime @default(now()) @map("created_at")

  // Relations
  distribution     KnowledgeDistribution @relation(fields: [distributionId], references: [id], onDelete: Cascade)

  @@index([distributionId])
  @@index([assistantId])
  @@map("agent_decisions")
}

// ============ Analytics & Statistics ============

model DailySummary {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  userId           String   @map("user_id") @db.ObjectId

  // Date
  date             DateTime @unique

  // Statistics
  memoriesCreated  Int      @default(0) @map("memories_created")
  chatsCount       Int      @default(0) @map("chats_count")
  mostUsedAssistant String? @map("most_used_assistant")
  topTags          String[] @map("top_tags")

  // AI Summary
  daySummary       String?  @map("day_summary") @db.String
  mood             String?  // overall mood of the day
  highlights       String[] // key highlights

  // Timestamps
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  @@index([userId, date])
  @@map("daily_summaries")
}

// ============ Legacy Models (暫時保留，之後可能移除) ============

// ============ RAG System (Hijiki 小黑知識管理員) ============

// 向量嵌入存儲 - 用於語義搜尋
model MemoryEmbedding {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  memoryId         String   @map("memory_id") @db.ObjectId
  userId           String   @map("user_id") @db.ObjectId

  // 向量數據 (Gemini Embeddings - 768 dimensions)
  embedding        Float[]  // MongoDB 支持數組存儲
  embeddingModel   String   @default("text-embedding-004") @map("embedding_model")

  // 文本內容（用於生成向量）
  textContent      String   @map("text_content") @db.String

  // Metadata
  dimension        Int      @default(768)

  // Timestamps
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  @@index([userId, memoryId])
  @@index([userId])
  @@map("memory_embeddings")
}

// Hijiki 對話會話 - RAG 增強的對話
model HijikiSession {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  userId           String   @map("user_id") @db.ObjectId
  sessionId        String   @map("session_id") // 前端生成的 session ID

  // Session Metadata
  title            String   @default("與小黑的對話")
  mode             String   @default("search") // search, analyze, chat

  // Conversation History (for context)
  messages         Json[]   @default([]) // [{role, content, timestamp}]

  // RAG Context
  usedMemoryIds    String[] @map("used_memory_ids") @db.ObjectId // 使用過的記憶 IDs
  totalQueries     Int      @default(0) @map("total_queries")

  // Status
  isActive         Boolean  @default(true) @map("is_active")

  // Timestamps
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")
  lastActiveAt     DateTime @default(now()) @map("last_active_at")

  @@index([userId, lastActiveAt(sort: Desc)])
  @@index([userId, sessionId])
  @@map("hijiki_sessions")
}

// 知識主題聚類 - 自動發現的知識主題
model KnowledgeCluster {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  userId           String   @map("user_id") @db.ObjectId

  // Cluster Info
  name             String   // AI 生成的主題名稱
  description      String?  @db.String
  emoji            String   @default("📚")

  // Cluster Metadata
  memoryIds        String[] @map("memory_ids") @db.ObjectId
  memoryCount      Int      @default(0) @map("memory_count")

  // Cluster Statistics
  averageImportance Float   @default(5) @map("average_importance")
  dateRange        Json     @map("date_range") // {start, end}

  // Status
  isArchived       Boolean  @default(false) @map("is_archived")

  // Timestamps
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  @@index([userId, createdAt])
  @@map("knowledge_clusters")
}

// 保留舊的 NPC、Conversation 等模型以支援資料遷移
// 遷移完成後可以刪除這些模型

model LegacyConversation {
  id                String    @id @default(auto()) @map("_id") @db.ObjectId
  userId            String    @map("user_id") @db.ObjectId
  npcId             String    @map("npc_id") @db.ObjectId
  content           String    @db.String
  speakerType       String    @map("speaker_type")
  timestamp         DateTime  @default(now())

  // AI Fields
  isLongTermMemory  Boolean   @default(false) @map("is_long_term_memory")
  aiImportanceScore Float?    @map("ai_importance_score")
  aiSummary         String?   @map("ai_summary") @db.String

  @@index([userId])
  @@map("legacy_conversations")
}

// ============ Custom Category System ============

// Island - 代表大類別（島嶼，建議5個左右）
model Island {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  userId           String   @map("user_id") @db.ObjectId

  // 順序位置（用於排序顯示）
  position         Int

  // 自訂資訊
  name             String?  // 英文名稱（已廢棄，僅向後兼容）
  nameChinese      String   @map("name_chinese") // 中文名稱（主要使用）
  emoji            String   @default("🏝️")
  color            String   @default("#FFB3D9") // Hex color code
  description      String?  @db.String

  // 3D 位置（島嶼在場景中的位置）
  positionX        Float    @default(0) @map("position_x")
  positionY        Float    @default(0) @map("position_y")
  positionZ        Float    @default(0) @map("position_z")

  // 3D 外觀配置（可選）
  modelUrl         String?  @map("model_url") // Custom 3D model URL (GLTF/GLB)
  textureId        String?  @map("texture_id") // Selected texture ID
  shape            String?  @default("circle") // Island shape: circle, hexagon, square, organic, etc.
  customShapeData  String?  @map("custom_shape_data") @db.String // JSON string of custom drawn shape points
  islandHeight     Float?   @default(2.0) @map("island_height") // Island height (0.5-5.0)
  islandBevel      Float?   @default(0.5) @map("island_bevel") // Island edge bevel/slope (0-2.0)

  // 統計
  subcategoryCount Int      @default(0) @map("subcategory_count")
  memoryCount      Int      @default(0) @map("memory_count")

  // 狀態
  isActive         Boolean  @default(true) @map("is_active")

  // Timestamps
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  // Relations
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  subcategories    Subcategory[]

  @@index([userId, position])
  @@index([userId])
  @@map("islands")
}

// Subcategory - 代表小類別（SubAgent，可自由新增刪減）
model Subcategory {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  userId           String   @map("user_id") @db.ObjectId
  islandId         String   @map("island_id") @db.ObjectId

  // 順序位置（用於排序顯示）
  position         Int

  // 自訂資訊
  name             String?  // 英文名稱（已廢棄，僅向後兼容）
  nameChinese      String   @map("name_chinese") // 中文名稱（主要使用）
  emoji            String   @default("📚")
  color            String   @default("#FFB3D9")
  description      String?  @db.String

  // AI 設定（關鍵！動態提示詞）
  systemPrompt     String   @map("system_prompt") @db.String
  personality      String   @db.String
  chatStyle        String   @map("chat_style") @db.String

  // 關鍵字（用於分類判斷）
  keywords         String[] @default([])

  // 統計
  memoryCount      Int      @default(0) @map("memory_count")
  chatCount        Int      @default(0) @map("chat_count")

  // 狀態
  isActive         Boolean  @default(true) @map("is_active")

  // Timestamps
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  // Relations
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  island           Island   @relation(fields: [islandId], references: [id], onDelete: Cascade)
  memories         Memory[]

  @@index([userId, position])
  @@index([userId, islandId])
  @@index([userId])
  @@map("subcategories")
}

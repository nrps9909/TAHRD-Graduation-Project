// Heart Whisper Town - Personal AI Knowledge Assistant
// MongoDB Schema for Multi-Agent System

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// ============ Core Models ============

model User {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  username     String   @unique
  email        String   @unique
  passwordHash String   @map("password_hash")

  // Profile
  displayName  String?  @map("display_name")
  avatarUrl    String?  @map("avatar_url")

  // Status
  isActive     Boolean  @default(true) @map("is_active")
  lastLogin    DateTime? @map("last_login")

  // Timestamps
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relations
  memories     Memory[]
  chatMessages ChatMessage[]
  settings     UserSettings?

  @@map("users")
}

model UserSettings {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  userId            String   @unique @map("user_id") @db.ObjectId

  // Preferences
  theme             String   @default("light")
  language          String   @default("zh-TW")
  defaultView       String   @default("island") @map("default_view") // "island" or "database"

  // Notifications
  emailNotifications Boolean @default(true) @map("email_notifications")

  // Privacy
  dataRetentionDays Int     @default(365) @map("data_retention_days")

  updatedAt         DateTime @updatedAt @map("updated_at")

  // Relations
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_settings")
}

// ============ Assistant Models ============

enum AssistantType {
  CHIEF      // 總管（智能分配 + 全局摘要）
  LEARNING   // 學習筆記
  INSPIRATION // 靈感創意
  WORK       // 工作事務
  SOCIAL     // 人際關係
  LIFE       // 生活記錄
  GOALS      // 目標規劃
  RESOURCES  // 資源收藏

  @@map("assistant_type")
}

model Assistant {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId

  // Identity
  type             AssistantType @unique
  name             String   @unique
  nameChinese      String   @map("name_chinese")
  emoji            String
  color            String   // Hex color code

  // AI Configuration
  systemPrompt     String   @map("system_prompt") @db.String
  personality      String   @db.String
  chatStyle        String   @map("chat_style") @db.String

  // 3D Position (for Island View)
  positionX        Float    @default(0) @map("position_x")
  positionY        Float    @default(0) @map("position_y")
  positionZ        Float    @default(0) @map("position_z")

  // Statistics
  totalMemories    Int      @default(0) @map("total_memories")
  totalChats       Int      @default(0) @map("total_chats")

  // Status
  isActive         Boolean  @default(true) @map("is_active")

  // Timestamps
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  // Relations
  memories         Memory[]
  chatMessages     ChatMessage[]

  @@map("assistants")
}

// ============ Memory System ============

model Memory {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  userId           String   @map("user_id") @db.ObjectId
  assistantId      String   @map("assistant_id") @db.ObjectId

  // Content
  rawContent       String   @map("raw_content") @db.String
  summary          String?  @db.String

  // AI Processing
  keyPoints        String[] @map("key_points")
  aiSentiment      String?  @map("ai_sentiment") // positive, neutral, negative
  aiImportance     Int      @default(5) @map("ai_importance") // 1-10

  // Classification
  category         AssistantType
  tags             String[] // 自動生成的標籤

  // Metadata
  title            String?  // 自動生成或用戶編輯
  emoji            String?  // 代表這條記憶的 emoji

  // Relations (Memory Links)
  relatedMemoryIds String[] @map("related_memory_ids") @db.ObjectId

  // Status
  isArchived       Boolean  @default(false) @map("is_archived")
  isPinned         Boolean  @default(false) @map("is_pinned")

  // Timestamps
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")
  archivedAt       DateTime? @map("archived_at")

  // Relations
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  assistant        Assistant @relation(fields: [assistantId], references: [id], onDelete: Cascade)
  chatMessages     ChatMessage[]

  @@index([userId, category])
  @@index([userId, createdAt])
  @@index([userId, assistantId])
  @@index([tags])
  @@map("memories")
}

// ============ Chat System ============

model ChatMessage {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  userId           String   @map("user_id") @db.ObjectId
  assistantId      String   @map("assistant_id") @db.ObjectId

  // Content
  userMessage      String   @map("user_message") @db.String
  assistantResponse String  @map("assistant_response") @db.String

  // Context
  memoryId         String?  @map("memory_id") @db.ObjectId
  contextType      ChatContextType @map("context_type")

  // Metadata
  tokenCount       Int?     @map("token_count")
  processingTime   Float?   @map("processing_time") // ms

  // Timestamps
  createdAt        DateTime @default(now()) @map("created_at")

  // Relations
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  assistant        Assistant @relation(fields: [assistantId], references: [id], onDelete: Cascade)
  memory           Memory?  @relation(fields: [memoryId], references: [id], onDelete: SetNull)

  @@index([userId, assistantId])
  @@index([userId, createdAt])
  @@map("chat_messages")
}

enum ChatContextType {
  MEMORY_CREATION  // 創建新記憶
  MEMORY_QUERY     // 查詢記憶
  GENERAL_CHAT     // 一般對話
  SUMMARY_REQUEST  // 請求摘要（Chief Agent）
  CLASSIFICATION   // 分類請求（Chief Agent）

  @@map("chat_context_type")
}

// ============ Tag System ============

model Tag {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId

  // Identity
  name             String   @unique
  nameChinese      String?  @map("name_chinese")

  // Statistics
  usageCount       Int      @default(0) @map("usage_count")

  // Metadata
  color            String?  // Optional color for tag cloud
  category         AssistantType? // Which assistant this tag commonly belongs to

  // Timestamps
  createdAt        DateTime @default(now()) @map("created_at")
  lastUsed         DateTime @default(now()) @map("last_used")

  @@map("tags")
}

// ============ Analytics & Statistics ============

model DailySummary {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  userId           String   @map("user_id") @db.ObjectId

  // Date
  date             DateTime @unique

  // Statistics
  memoriesCreated  Int      @default(0) @map("memories_created")
  chatsCount       Int      @default(0) @map("chats_count")
  mostUsedAssistant String? @map("most_used_assistant")
  topTags          String[] @map("top_tags")

  // AI Summary
  daySummary       String?  @map("day_summary") @db.String
  mood             String?  // overall mood of the day
  highlights       String[] // key highlights

  // Timestamps
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  @@index([userId, date])
  @@map("daily_summaries")
}

// ============ Legacy Models (暫時保留，之後可能移除) ============

// 保留舊的 NPC、Conversation 等模型以支援資料遷移
// 遷移完成後可以刪除這些模型

model LegacyConversation {
  id                String    @id @default(auto()) @map("_id") @db.ObjectId
  userId            String    @map("user_id") @db.ObjectId
  npcId             String    @map("npc_id") @db.ObjectId
  content           String    @db.String
  speakerType       String    @map("speaker_type")
  timestamp         DateTime  @default(now())

  // AI Fields
  isLongTermMemory  Boolean   @default(false) @map("is_long_term_memory")
  aiImportanceScore Float?    @map("ai_importance_score")
  aiSummary         String?   @map("ai_summary") @db.String

  @@index([userId])
  @@map("legacy_conversations")
}

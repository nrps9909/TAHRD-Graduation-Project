name: Build, Test and Deploy to Production (Speed Optimized)

on:
  push:
    branches:
      - production
  pull_request:
    branches:
      - production

permissions:
  contents: read
  packages: write
  id-token: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: nrps9909/tahrd-graduation-project

jobs:
  # 检测变更的组件
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      backend: ${{ steps.filter.outputs.backend }}
      frontend: ${{ steps.filter.outputs.frontend }}
      docker: ${{ steps.filter.outputs.docker }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            backend:
              - 'backend/**'
              - 'package.json'
            frontend:
              - 'frontend/**'
              - 'package.json'
            docker:
              - 'docker-compose*.yml'
              - '.env.production'
              - 'nginx/**'

  # 第一階段：測試和驗證（只測試有變更的組件）
  test:
    needs: detect-changes
    runs-on: ubuntu-latest
    strategy:
      matrix:
        component: [backend, frontend]
      fail-fast: false

    steps:
      - name: Skip if no changes
        id: skip-check
        run: |
          if [ "${{ matrix.component }}" == "backend" ] && [ "${{ needs.detect-changes.outputs.backend }}" != "true" ]; then
            echo "skip=true" >> $GITHUB_OUTPUT
            echo "⏭️ 跳過 backend 測試（無變更）"
          elif [ "${{ matrix.component }}" == "frontend" ] && [ "${{ needs.detect-changes.outputs.frontend }}" != "true" ]; then
            echo "skip=true" >> $GITHUB_OUTPUT
            echo "⏭️ 跳過 frontend 測試（無變更）"
          else
            echo "skip=false" >> $GITHUB_OUTPUT
          fi

      - name: Checkout code
        if: steps.skip-check.outputs.skip != 'true'
        uses: actions/checkout@v4

      - name: Setup Node.js
        if: steps.skip-check.outputs.skip != 'true'
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      - name: Install Dependencies (Workspaces)
        if: steps.skip-check.outputs.skip != 'true'
        run: npm ci --prefer-offline --no-audit

      - name: Lint ${{ matrix.component }}
        if: steps.skip-check.outputs.skip != 'true'
        run: |
          cd ${{ matrix.component }}
          npm run lint || echo "⚠️ No lint script found"

      - name: Type Check ${{ matrix.component }}
        if: steps.skip-check.outputs.skip != 'true'
        run: |
          cd ${{ matrix.component }}
          timeout 2m npx tsc --noEmit || echo "⚠️ Type check timed out or failed"

      - name: Test ${{ matrix.component }}
        if: steps.skip-check.outputs.skip != 'true'
        run: |
          cd ${{ matrix.component }}
          npm test || echo "⚠️ No tests found"

  # 驗證配置文件（僅在相關文件變更時）
  validate-config:
    needs: detect-changes
    runs-on: ubuntu-latest
    if: needs.detect-changes.outputs.docker == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate Docker Compose
        run: |
          cat > .env.production << EOF
          NODE_ENV=production
          PORT=4000
          FRONTEND_PORT=3000
          DATABASE_URL="mongodb://localhost:27017/test"
          REDIS_URL=redis://redis:6379
          REDIS_HOST=redis
          REDIS_PORT=6379
          JWT_SECRET=test_secret
          GEMINI_API_KEY=test_key
          FRONTEND_URL=https://example.com
          EOF

          docker compose -f docker-compose.production-prebuilt.yml config > /dev/null
          echo "✅ Docker Compose 配置驗證通過"

      - name: Validate Nginx Config
        run: |
          if grep -r "upstream backend" nginx/conf.d/*.conf | wc -l | grep -q "^[2-9]"; then
            echo "❌ 錯誤：發現重複的 upstream backend 定義"
            exit 1
          fi
          echo "✅ Nginx 配置檢查通過"

  # 第二階段：構建和推送映像（只構建有變更的組件）
  build-and-push:
    needs: [detect-changes, test]
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    strategy:
      matrix:
        component: [backend, frontend]

    steps:
      - name: Skip if no changes
        id: skip-check
        run: |
          if [ "${{ matrix.component }}" == "backend" ] && [ "${{ needs.detect-changes.outputs.backend }}" != "true" ]; then
            echo "skip=true" >> $GITHUB_OUTPUT
            echo "⏭️ 跳過 backend 構建（無變更）"
          elif [ "${{ matrix.component }}" == "frontend" ] && [ "${{ needs.detect-changes.outputs.frontend }}" != "true" ]; then
            echo "skip=true" >> $GITHUB_OUTPUT
            echo "⏭️ 跳過 frontend 構建（無變更）"
          else
            echo "skip=false" >> $GITHUB_OUTPUT
          fi

      - name: Checkout code
        if: steps.skip-check.outputs.skip != 'true'
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        if: steps.skip-check.outputs.skip != 'true'
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        if: steps.skip-check.outputs.skip != 'true'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for ${{ matrix.component }}
        if: steps.skip-check.outputs.skip != 'true'
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.component }}
          tags: |
            type=raw,value=latest
            type=sha,prefix={{branch}}-

      - name: Build and push ${{ matrix.component }} image
        if: steps.skip-check.outputs.skip != 'true'
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.component }}
          file: ./${{ matrix.component }}/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.component }}:buildcache
          cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.component }}:buildcache,mode=max
          build-args: |
            VITE_BACKEND_URL=${{ matrix.component == 'frontend' && 'https://jesse-chen.com' || '' }}
            VITE_GRAPHQL_URL=${{ matrix.component == 'frontend' && 'https://jesse-chen.com/graphql' || '' }}
            VITE_API_URL=${{ matrix.component == 'frontend' && 'https://jesse-chen.com/api' || '' }}
            VITE_WS_URL=${{ matrix.component == 'frontend' && 'wss://jesse-chen.com/graphql' || '' }}
            VITE_GEMINI_API_KEY=${{ matrix.component == 'frontend' && secrets.VITE_GEMINI_API_KEY || '' }}
            VITE_OPENWEATHER_API_KEY=${{ matrix.component == 'frontend' && secrets.VITE_OPENWEATHER_API_KEY || '' }}
            VITE_DEBUG=${{ matrix.component == 'frontend' && 'false' || '' }}

  # 第三階段：部署（優化健康檢查）
  deploy:
    needs: [detect-changes, build-and-push]
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    timeout-minutes: 8

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to production server
        uses: appleboy/ssh-action@v1.0.0
        env:
          GITHUB_REPOSITORY: ${{ env.IMAGE_NAME }}
          BACKEND_CHANGED: ${{ needs.detect-changes.outputs.backend }}
          FRONTEND_CHANGED: ${{ needs.detect-changes.outputs.frontend }}
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          envs: GITHUB_REPOSITORY,BACKEND_CHANGED,FRONTEND_CHANGED
          script_stop: true
          script: |
            set -e

            cd /home/jesse/heart-whisper-town

            echo "========================================="
            echo "🚀 開始部署到生產環境"
            echo "Backend 變更: ${BACKEND_CHANGED}"
            echo "Frontend 變更: ${FRONTEND_CHANGED}"
            echo "========================================="

            # 1. 備份當前版本
            echo "📦 備份當前版本..."
            BACKUP_TAG="backup-$(date +%Y%m%d-%H%M%S)"
            docker tag ghcr.io/${GITHUB_REPOSITORY}/backend:latest ghcr.io/${GITHUB_REPOSITORY}/backend:${BACKUP_TAG} 2>/dev/null || true
            docker tag ghcr.io/${GITHUB_REPOSITORY}/frontend:latest ghcr.io/${GITHUB_REPOSITORY}/frontend:${BACKUP_TAG} 2>/dev/null || true

            # 2. 拉取最新代碼
            echo "📥 拉取最新代碼..."
            git fetch origin
            PREVIOUS_COMMIT=$(git rev-parse HEAD)
            git reset --hard origin/production

            # 3. 智能拉取映像（只拉取有變更的）
            echo "🐳 拉取映像..."
            if [ "${BACKEND_CHANGED}" = "true" ]; then
              echo "📦 拉取 backend 映像..."
              docker compose -f docker-compose.production-prebuilt.yml pull backend
            fi
            if [ "${FRONTEND_CHANGED}" = "true" ]; then
              echo "📦 拉取 frontend 映像..."
              docker compose -f docker-compose.production-prebuilt.yml pull frontend
            fi
            if [ "${BACKEND_CHANGED}" != "true" ] && [ "${FRONTEND_CHANGED}" != "true" ]; then
              echo "⏭️ 無組件變更，拉取所有映像以確保一致性"
              docker compose -f docker-compose.production-prebuilt.yml pull
            fi

            # 4. 重新創建容器
            echo "🔄 重新創建容器..."
            docker compose -f docker-compose.production-prebuilt.yml up -d --force-recreate

            # 5. 快速健康檢查（優化重試邏輯）
            echo "🏥 執行健康檢查..."
            MAX_RETRIES=5
            RETRY_COUNT=0
            BACKEND_HEALTHY=false

            while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
              RETRY_COUNT=$((RETRY_COUNT + 1))
              echo "嘗試 $RETRY_COUNT/$MAX_RETRIES..."

              # 檢查容器狀態
              BACKEND_STATUS=$(docker inspect -f '{{.State.Status}}' heart-whisper-backend 2>/dev/null || echo "not_found")
              if [ "$BACKEND_STATUS" != "running" ]; then
                echo "❌ 後端容器未運行"
                exit 1
              fi

              # 健康檢查（5秒超時）
              HTTP_CODE=$(timeout 5 curl -L -s -o /dev/null -w "%{http_code}" http://localhost/health 2>/dev/null || echo "000")
              if [ "$HTTP_CODE" = "200" ]; then
                echo "✅ 後端健康檢查通過"
                BACKEND_HEALTHY=true
                break
              fi

              sleep 5
            done

            if [ "$BACKEND_HEALTHY" = false ]; then
              echo "❌ 健康檢查失敗"
              docker compose -f docker-compose.production-prebuilt.yml logs --tail=50 backend
              exit 1
            fi

            # GraphQL 快速檢查
            if ! timeout 5 curl -f -s -X POST http://localhost/graphql \
                -H "Content-Type: application/json" \
                -d '{"query":"{__typename}"}' > /dev/null 2>&1; then
              echo "❌ GraphQL 健康檢查失敗"
              exit 1
            fi
            echo "✅ GraphQL 健康檢查通過"

            # 6. 清理
            echo "🧹 清理舊映像..."
            docker image prune -f --filter "until=24h"

            echo "========================================="
            echo "✅ 部署成功！"
            echo "========================================="

      # 部署失敗時自動回滾
      - name: Rollback on failure
        if: failure()
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -e
            echo "⚠️ 部署失敗，開始自動回滾"
            cd /home/jesse/heart-whisper-town
            docker compose -f docker-compose.production-prebuilt.yml up -d --force-recreate
            echo "✅ 回滾完成"

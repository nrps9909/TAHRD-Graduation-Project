Title: Security - Anthropic
File: security.html
==================================================

Security - Anthropic 
Anthropic home page English 

Search... 

Search... 

Navigation Administration 
Security 

Welcome 
Developer Platform 
Claude Code 
Model Context Protocol (MCP) 
API Reference 
Resources 
Release Notes 

Getting started Overview 

Quickstart 

Common workflows 

Build with Claude Code Claude Code SDK 

Subagents 

Claude Code hooks 

GitHub Actions 

Model Context Protocol (MCP) 

Troubleshooting 

Deployment Overview 

Amazon Bedrock 

Google Vertex AI 

Corporate proxy 

LLM gateway 

Development containers 

Administration Advanced installation 

Identity and Access Management 

Security 

Data usage 

Monitoring 

Costs 

Analytics 

Configuration Settings 

Add Claude Code to your IDE 

Terminal configuration 

Memory management 

Status line configuration 

Reference CLI reference 

Interactive mode 

Slash commands 

Hooks reference 

Resources Legal and compliance 

==== ====

=== ​ 

How we approach security ===

== ​ 

Security foundation ==
Your code’s security is paramount. Claude Code is built with security at its core, developed according to Anthropic’s comprehensive security program. Learn more and access resources (SOC 2 Type 2 report, ISO 27001 certificate, etc.) at Anthropic Trust Center . 

== ​ 

Permission-based architecture ==
Claude Code uses strict read-only permissions by default. When additional actions are needed (editing files, running tests, executing commands), Claude Code requests explicit permission. Users control whether to approve actions once or allow them automatically. 
We designed Claude Code to be transparent and secure. For example, we require approval for bash commands before executing them, giving you direct control. This approach enables users and organizations to configure permissions directly. 
For detailed permission configuration, see Identity and Access Management . 

== ​ 

Built-in protections ==
To mitigate risks in agentic systems: 
Write access restriction : Claude Code can only write to the folder where it was started and its subfolders—it cannot modify files in parent directories. While Claude Code can read files outside the working directory (useful for accessing system libraries and dependencies), write operations are strictly confined to the project scope, creating a clear security boundary 
Prompt fatigue mitigation : Support for allowlisting frequently used safe commands per-user, per-codebase, or per-organization 
Accept Edits mode : Batch accept multiple edits while maintaining permission prompts for commands with side effects 

== ​ 

User responsibility ==
Claude Code only has the permissions you grant it. You’re responsible for reviewing proposed code and commands for safety before approval. 

=== ​ 

Protect against prompt injection ===
Prompt injection is a technique where an attacker attempts to override or manipulate an AI assistant’s instructions by inserting malicious text. Claude Code includes several safeguards against these attacks: 

== ​ 

Core protections ==
Permission system : Sensitive operations require explicit approval 
Context-aware analysis : Detects potentially harmful instructions by analyzing the full request 
Input sanitization : Prevents command injection by processing user inputs 
Command blocklist : Blocks risky commands that fetch arbitrary content from the web like curl and wget 

== ​ 

Privacy safeguards ==
We have implemented several safeguards to protect your data, including: 
Limited retention periods for sensitive information 
Restricted access to user session data 
Clear policies against using feedback for model training 
For full details, please review our Commercial Terms of Service and Privacy Policy . 

== ​ 

Additional safeguards ==
Network request approval : Tools that make network requests require user approval by default 
Isolated context windows : Web fetch uses a separate context window to avoid injecting potentially malicious prompts 
Trust verification : First-time codebase runs and new MCP servers require trust verification 
Command injection detection : Suspicious bash commands require manual approval even if previously allowlisted 
Fail-closed matching : Unmatched commands default to requiring manual approval 
Natural language descriptions : Complex bash commands include explanations for user understanding 
Secure credential storage : API keys and tokens are encrypted. See Credential Management 
Best practices for working with untrusted content : 
Review suggested commands before approval 
Avoid piping untrusted content directly to Claude 
Verify proposed changes to critical files 
Use virtual machines (VMs) to run scripts and make tool calls, especially when interacting with external web services 
Report suspicious behavior with /bug 

While these protections significantly reduce risk, no system is completely
immune to all attacks. Always maintain good security practices when working
with any AI tool. 

=== ​ 

MCP security ===
Claude Code allows users to configure Mod
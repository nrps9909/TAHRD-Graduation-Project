Title: Slash commands - Anthropic
File: slash-commands.html
==================================================

Slash commands - Anthropic 
Anthropic home page English 

Search... 

Search... 

Navigation Reference 
Slash commands 

Welcome 
Developer Platform 
Claude Code 
Model Context Protocol (MCP) 
API Reference 
Resources 
Release Notes 

Getting started Overview 

Quickstart 

Common workflows 

Build with Claude Code Claude Code SDK 

Subagents 

Claude Code hooks 

GitHub Actions 

Model Context Protocol (MCP) 

Troubleshooting 

Deployment Overview 

Amazon Bedrock 

Google Vertex AI 

Corporate proxy 

LLM gateway 

Development containers 

Administration Advanced installation 

Identity and Access Management 

Security 

Data usage 

Monitoring 

Costs 

Analytics 

Configuration Settings 

Add Claude Code to your IDE 

Terminal configuration 

Memory management 

Status line configuration 

Reference CLI reference 

Interactive mode 

Slash commands 

Hooks reference 

Resources Legal and compliance 

==== ====

=== ​ 

Built-in slash commands ===
Command Purpose /add-dir Add additional working directories /agents Manage custom AI subagents for specialized tasks /bug Report bugs (sends conversation to Anthropic) /clear Clear conversation history /compact [instructions] Compact conversation with optional focus instructions /config View/modify configuration /cost Show token usage statistics /doctor Checks the health of your Claude Code installation /help Get usage help /init Initialize project with CLAUDE.md guide /login Switch Anthropic accounts /logout Sign out from your Anthropic account /mcp Manage MCP server connections and OAuth authentication /memory Edit CLAUDE.md memory files /model Select or change the AI model /permissions View or update permissions /pr_comments View pull request comments /review Request code review /status View account and system statuses /terminal-setup Install Shift+Enter key binding for newlines (iTerm2 and VSCode only) /vim Enter vim mode for alternating insert and command modes 
=== ​ 

Custom slash commands ===
Custom slash commands allow you to define frequently-used prompts as Markdown files that Claude Code can execute. Commands are organized by scope (project-specific or personal) and support namespacing through directory structures. 

== ​ 

Syntax ==
/<command-name> [arguments] 

= ​ 

Parameters =
Parameter Description <command-name> Name derived from the Markdown filename (without .md extension) [arguments] Optional arguments passed to the command 
== ​ 

Command types ==

= ​ 

Project commands =
Commands stored in your repository and shared with your team. When listed in /help , these commands show “(project)” after their description. 
Location : .claude/commands/ 
In the following example, we create the /optimize command: 
# Create a project command mkdir -p .claude/commands echo "Analyze this code for performance issues and suggest optimizations:" > .claude/commands/optimize.md 

= ​ 

Personal commands =
Commands available across all your projects. When listed in /help , these commands show “(user)” after their description. 
Location : ~/.claude/commands/ 
In the following example, we create the /security-review command: 
# Create a personal command mkdir -p ~/.claude/commands echo "Review this code for security vulnerabilities:" > ~/.claude/commands/security-review.md 

== ​ 

Features ==

= ​ 

Namespacing =
Organize commands in subdirectories. The subdirectories determine the command’s
full name. The description will show whether the command comes from the project
directory ( .claude/commands ) or the user-level directory ( ~/.claude/commands ). 
Conflicts between user and project level commands are not supported. Otherwise,
multiple commands with the same base file name can coexist. 
For example, a file at .claude/commands/frontend/component.md creates the command /frontend:component with description showing “(project)”.
Meanwhile, a file at ~/.claude/commands/component.md creates the command /component with description showing “(user)”. 

= ​ 

Arguments =
Pass dynamic values to commands using the $ARGUMENTS placeholder. 
For example: 
# Command definition echo 'Fix issue #$ARGUMENTS following our coding standards' > .claude/commands/fix-issue.md # Usage > /fix-issue 123 

= ​ 

Bash command execution =
Execute bash commands before the slash command runs using the ! prefix. The output is included in the command context. You must include allowed-tools with the Bash tool, but you can choose the specific bash commands to allow. 
For example: 
--- allowed-tools: Bash(git add: * ), Bash(git status: * ), Bash(git commit:*) description: Create a git commit --- ## Context - Current git status: ! `git status` - Current git diff (staged and unstaged changes): ! `git diff HEAD` - Current branch: ! `git branch --show-current` - Recent commits: ! `git log --oneline -10` ## Your task Based on the above changes, create a single git commit. 

= ​ 

File references =
Include file contents in commands using the @ prefix to reference files . 
For example: 
# Reference a sp
Title: Quickstart - Anthropic
File: quickstart.html
==================================================

Quickstart - Anthropic 
Anthropic home page English 

Search... 

Search... 

Navigation Getting started 
Quickstart 

Welcome 
Developer Platform 
Claude Code 
Model Context Protocol (MCP) 
API Reference 
Resources 
Release Notes 

Getting started Overview 

Quickstart 

Common workflows 

Build with Claude Code Claude Code SDK 

Subagents 

Claude Code hooks 

GitHub Actions 

Model Context Protocol (MCP) 

Troubleshooting 

Deployment Overview 

Amazon Bedrock 

Google Vertex AI 

Corporate proxy 

LLM gateway 

Development containers 

Administration Advanced installation 

Identity and Access Management 

Security 

Data usage 

Monitoring 

Costs 

Analytics 

Configuration Settings 

Add Claude Code to your IDE 

Terminal configuration 

Memory management 

Status line configuration 

Reference CLI reference 

Interactive mode 

Slash commands 

Hooks reference 

Resources Legal and compliance 

==== ====

This quickstart guide will have you using AI-powered coding assistance in just a few minutes. By the end, you’ll understand how to use Claude Code for common development tasks. 

=== ​ 

Before you begin ===
Make sure you have: 
A terminal or command prompt open 
A code project to work with 

=== ​ 

Step 1: Install Claude Code ===

== ​ 

NPM Install ==
If you have Node.js 18 or newer installed : 
npm install -g @anthropic-ai/claude-code 

== ​ 

Native Install ==

Alternatively, try our new native install, now in beta. 

macOS, Linux, WSL: 
curl -fsSL claude.ai/install.sh | bash 

Windows PowerShell: 
irm https: / / claude . ai/install . ps1 | iex 

=== ​ 

Step 2: Start your first session ===
Open your terminal in any project directory and start Claude Code: 
cd /path/to/your/project claude 

You’ll see the Claude Code prompt inside a new interactive session: 
✻ Welcome to Claude Code! ... > Try "create a util logging.py that..." 

Your credentials are securely stored on your system. Learn more in Credential Management . 

=== ​ 

Step 3: Ask your first question ===
Let’s start with understanding your codebase. Try one of these commands: 
> what does this project do? 

Claude will analyze your files and provide a summary. You can also ask more specific questions: 
> what technologies does this project use? 

> where is the main entry point? 

> explain the folder structure 

You can also ask Claude about its own capabilities: 
> what can Claude Code do? 

> how do I use slash commands in Claude Code? 

> can Claude Code work with Docker? 

Claude Code reads your files as needed - you don’t have to manually add context. Claude also has access to its own documentation and can answer questions about its features and capabilities. 

=== ​ 

Step 4: Make your first code change ===
Now let’s make Claude Code do some actual coding. Try a simple task: 
> add a hello world function to the main file 

Claude Code will: 
Find the appropriate file 
Show you the proposed changes 
Ask for your approval 
Make the edit 

Claude Code always asks for permission before modifying files. You can approve individual changes or enable “Accept all” mode for a session. 

=== ​ 

Step 5: Use Git with Claude Code ===
Claude Code makes Git operations conversational: 
> what files have I changed? 

> commit my changes with a descriptive message 

You can also prompt for more complex Git operations: 
> create a new branch called feature/quickstart 

> show me the last 5 commits 

> help me resolve merge conflicts 

=== ​ 

Step 6: Fix a bug or add a feature ===
Claude is proficient at debugging and feature implementation. 
Describe what you want in natural language: 
> add input validation to the user registration form 

Or fix existing issues: 
> there's a bug where users can submit empty forms - fix it 

Claude Code will: 
Locate the relevant code 
Understand the context 
Implement a solution 
Run tests if available 

=== ​ 

Step 7: Test out other common workflows ===
There are a number of ways to work with Claude: 
Refactor code 
> refactor the authentication module to use async/await instead of callbacks 

Write tests 
> write unit tests for the calculator functions 

Update documentation 
> update the README with installation instructions 

Code review 
> review my changes and suggest improvements 

Remember : Claude Code is your AI pair programmer. Talk to it like you would a helpful colleague - describe what you want to achieve, and it will help you get there. 

=== ​ 

Essential commands ===
Here are the most important commands for daily use: 
Command What it does Example claude Start interactive mode claude claude "task" Run a one-time task claude "fix the build error" claude -p "query" Run one-off query, then exit claude -p "explain this function" claude -c Continue most recent conversation claude -c claude -r Resume a previous conversation claude -r claude commit Create a Git commit claude commit /clear Clear conversation history > /clear /help Show available commands > /help exit or Ctrl+C Exit Claude Code > exit
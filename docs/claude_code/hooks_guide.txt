Title: Get started with Claude Code hooks - Anthropic
File: hooks-guide.html
==================================================

Get started with Claude Code hooks - Anthropic 
Anthropic home page English 

Search... 

Search... 

Navigation Build with Claude Code 
Get started with Claude Code hooks 

Welcome 
Developer Platform 
Claude Code 
Model Context Protocol (MCP) 
API Reference 
Resources 
Release Notes 

Getting started Overview 

Quickstart 

Common workflows 

Build with Claude Code Claude Code SDK 

Subagents 

Claude Code hooks 

GitHub Actions 

Model Context Protocol (MCP) 

Troubleshooting 

Deployment Overview 

Amazon Bedrock 

Google Vertex AI 

Corporate proxy 

LLM gateway 

Development containers 

Administration Advanced installation 

Identity and Access Management 

Security 

Data usage 

Monitoring 

Costs 

Analytics 

Configuration Settings 

Add Claude Code to your IDE 

Terminal configuration 

Memory management 

Status line configuration 

Reference CLI reference 

Interactive mode 

Slash commands 

Hooks reference 

Resources Legal and compliance 

==== ====

Claude Code hooks are user-defined shell commands that execute at various points
in Claude Code’s lifecycle. Hooks provide deterministic control over Claude
Code’s behavior, ensuring certain actions always happen rather than relying on
the LLM to choose to run them. 

For reference documentation on hooks, see Hooks reference . 

Example use cases for hooks include: 
Notifications : Customize how you get notified when Claude Code is awaiting
your input or permission to run something. 
Automatic formatting : Run prettier on .ts files, gofmt on .go files,
etc. after every file edit. 
Logging : Track and count all executed commands for compliance or
debugging. 
Feedback : Provide automated feedback when Claude Code produces code that
does not follow your codebase conventions. 
Custom permissions : Block modifications to production files or sensitive
directories. 
By encoding these rules as hooks rather than prompting instructions, you turn
suggestions into app-level code that executes every time it is expected to run. 

You must consider the security implication of hooks as you add them, because hooks run automatically during the agent loop with your current environment’s credentials.
For example, malicious hooks code can exfiltrate your data. Always review your hooks implementation before registering them. 
For full security best practices, see Security Considerations in the hooks reference documentation. 

=== ​ 

Hook Events Overview ===
Claude Code provides several hook events that run at different points in the
workflow: 
PreToolUse : Runs before tool calls (can block them) 
PostToolUse : Runs after tool calls complete 
Notification : Runs when Claude Code sends notifications 
Stop : Runs when Claude Code finishes responding 
Subagent Stop : Runs when subagent tasks complete 
Each event receives different data and can control Claude’s behavior in
different ways. 

=== ​ 

Quickstart ===
In this quickstart, you’ll add a hook that logs the shell commands that Claude
Code runs. 

== ​ 

Prerequisites ==
Install jq for JSON processing in the command line. 

== ​ 

Step 1: Open hooks configuration ==
Run the /hooks slash command and select
the PreToolUse hook event. 
PreToolUse hooks run before tool calls and can block them while providing
Claude feedback on what to do differently. 

== ​ 

Step 2: Add a matcher ==
Select + Add new matcher… to run your hook only on Bash tool calls. 
Type Bash for the matcher. 

You can use * to match all tools. 

== ​ 

Step 3: Add the hook ==
Select + Add new hook… and enter this command: 
jq -r '"\(.tool_input.command) - \(.tool_input.description // "No description")"' >> ~/.claude/bash-command-log.txt 

== ​ 

Step 4: Save your configuration ==
For storage location, select User settings since you’re logging to your home
directory. This hook will then apply to all projects, not just your current
project. 
Then press Esc until you return to the REPL. Your hook is now registered! 

== ​ 

Step 5: Verify your hook ==
Run /hooks again or check ~/.claude/settings.json to see your configuration: 
{ "hooks" : { "PreToolUse" : [ { "matcher" : "Bash" , "hooks" : [ { "type" : "command" , "command" : "jq -r '\"\\(.tool_input.command) - \\(.tool_input.description // \"No description\")\"' >> ~/.claude/bash-command-log.txt" } ] } ] } } 

== ​ 

Step 6: Test your hook ==
Ask Claude to run a simple command like ls and check your log file: 
cat ~/.claude/bash-command-log.txt 

You should see entries like: 
ls - Lists files and directories 

=== ​ 

More Examples ===

For a complete example implementation, see the bash command validator example in our public codebase. 

== ​ 

Code Formatting Hook ==
Automatically format TypeScript files after editing: 
{ "hooks" : { "PostToolUse" : [ { "matcher" : "Edit|MultiEdit|Write" , "hooks" : [ { "type" : "command" , "command" : "jq -r '.tool_input.file_path' | { read file_path; if echo \"$file_path\" | grep -q '\\.ts$'; then npx prettier --write \"$file_path\"; fi; }" } ] } ] } } 

== ​ 

Title: Claude Code settings - Anthropic
File: settings.html
==================================================

Claude Code settings - Anthropic 
Anthropic home page English 

Search... 

Search... 

Navigation Configuration 
Claude Code settings 

Welcome 
Developer Platform 
Claude Code 
Model Context Protocol (MCP) 
API Reference 
Resources 
Release Notes 

Getting started Overview 

Quickstart 

Common workflows 

Build with Claude Code Claude Code SDK 

Subagents 

Claude Code hooks 

GitHub Actions 

Model Context Protocol (MCP) 

Troubleshooting 

Deployment Overview 

Amazon Bedrock 

Google Vertex AI 

Corporate proxy 

LLM gateway 

Development containers 

Administration Advanced installation 

Identity and Access Management 

Security 

Data usage 

Monitoring 

Costs 

Analytics 

Configuration Settings 

Add Claude Code to your IDE 

Terminal configuration 

Memory management 

Status line configuration 

Reference CLI reference 

Interactive mode 

Slash commands 

Hooks reference 

Resources Legal and compliance 

==== ====

Claude Code offers a variety of settings to configure its behavior to meet your needs. You can configure Claude Code by running the /config command when using the interactive REPL. 

=== ​ 

Settings files ===
The settings.json file is our official mechanism for configuring Claude
Code through hierarchical settings: 
User settings are defined in ~/.claude/settings.json and apply to all
projects. 
Project settings are saved in your project directory: .claude/settings.json for settings that are checked into source control and shared with your team 
.claude/settings.local.json for settings that are not checked in, useful for personal preferences and experimentation. Claude Code will configure git to ignore .claude/settings.local.json when it is created. 

For enterprise deployments of Claude Code, we also support enterprise
managed policy settings . These take precedence over user and project
settings. System administrators can deploy policies to: macOS: /Library/Application Support/ClaudeCode/managed-settings.json 
Linux and WSL: /etc/claude-code/managed-settings.json 
Windows: C:\ProgramData\ClaudeCode\managed-settings.json 

Example settings.json 

{ "permissions" : { "allow" : [ "Bash(npm run lint)" , "Bash(npm run test:*)" , "Read(~/.zshrc)" ] , "deny" : [ "Bash(curl:*)" , "Read(./.env)" , "Read(./.env.*)" , "Read(./secrets/**)" ] } , "env" : { "CLAUDE_CODE_ENABLE_TELEMETRY" : "1" , "OTEL_METRICS_EXPORTER" : "otlp" } } 

== ​ 

Available settings ==
settings.json supports a number of options: 
Key Description Example apiKeyHelper Custom script, to be executed in /bin/sh , to generate an auth value. This value will be sent as X-Api-Key and Authorization: Bearer headers for model requests /bin/generate_temp_api_key.sh cleanupPeriodDays How long to locally retain chat transcripts (default: 30 days) 20 env Environment variables that will be applied to every session {"FOO": "bar"} includeCoAuthoredBy Whether to include the co-authored-by Claude byline in git commits and pull requests (default: true ) false permissions See table below for structure of permissions. hooks Configure custom commands to run before or after tool executions. See hooks documentation {"PreToolUse": {"Bash": "echo 'Running command...'"}} model Override the default model to use for Claude Code "claude-3-5-sonnet-20241022" statusLine Configure a custom status line to display context. See statusLine documentation {"type": "command", "command": "~/.claude/statusline.sh"} forceLoginMethod Use claudeai to restrict login to Claude.ai accounts, console to restrict login to Anthropic Console (API usage billing) accounts claudeai enableAllProjectMcpServers Automatically approve all MCP servers defined in project .mcp.json files true enabledMcpjsonServers List of specific MCP servers from .mcp.json files to approve ["memory", "github"] disabledMcpjsonServers List of specific MCP servers from .mcp.json files to reject ["filesystem"] awsAuthRefresh Custom script that modifies the .aws directory (see advanced credential configuration ) aws sso login --profile myprofile awsCredentialExport Custom script that outputs JSON with AWS credentials (see advanced credential configuration ) /bin/generate_aws_grant.sh 
== ​ 

Permission settings ==
Keys Description Example allow Array of permission rules to allow tool use [ "Bash(git diff:*)" ] deny Array of permission rules to deny tool use. Use this to also exclude sensitive files from Claude Code access. [ "WebFetch", "Bash(curl:*)", "Read(./.env)", "Read(./secrets/**)" ] additionalDirectories Additional working directories that Claude has access to [ "../docs/" ] defaultMode Default permission mode when opening Claude Code "acceptEdits" disableBypassPermissionsMode Set to "disable" to prevent bypassPermissions mode from being activated. See managed policy settings "disable" 
== ​ 

Settings precedence ==
Settings are applied in order of precedence (highest to lowest): 
Enterprise managed policies ( managed-settings.json ) 
Deployed by IT/DevOps 
Cannot be overridden 

Command line 
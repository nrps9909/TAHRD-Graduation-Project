Title: Common workflows - Anthropic
File: common-workflows.html
==================================================

Common workflows - Anthropic 
Anthropic home page English 

Search... 

Search... 

Navigation Getting started 
Common workflows 

Welcome 
Developer Platform 
Claude Code 
Model Context Protocol (MCP) 
API Reference 
Resources 
Release Notes 

Getting started Overview 

Quickstart 

Common workflows 

Build with Claude Code Claude Code SDK 

Subagents 

Claude Code hooks 

GitHub Actions 

Model Context Protocol (MCP) 

Troubleshooting 

Deployment Overview 

Amazon Bedrock 

Google Vertex AI 

Corporate proxy 

LLM gateway 

Development containers 

Administration Advanced installation 

Identity and Access Management 

Security 

Data usage 

Monitoring 

Costs 

Analytics 

Configuration Settings 

Add Claude Code to your IDE 

Terminal configuration 

Memory management 

Status line configuration 

Reference CLI reference 

Interactive mode 

Slash commands 

Hooks reference 

Resources Legal and compliance 

==== ====

Each task in this document includes clear instructions, example commands, and best practices to help you get the most from Claude Code. 

=== ​ 

Understand new codebases ===

== ​ 

Get a quick codebase overview ==
Suppose you’ve just joined a new project and need to understand its structure quickly. 

1 

Navigate to the project root directory 
cd /path/to/project 

2 

Start Claude Code 
claude 

3 

Ask for a high-level overview 
> give me an overview of this codebase 

4 

Dive deeper into specific components 
> explain the main architecture patterns used here 

> what are the key data models? 

> how is authentication handled? 

Tips: 
Start with broad questions, then narrow down to specific areas 
Ask about coding conventions and patterns used in the project 
Request a glossary of project-specific terms 

== ​ 

Find relevant code ==
Suppose you need to locate code related to a specific feature or functionality. 

1 

Ask Claude to find relevant files 
> find the files that handle user authentication 

2 

Get context on how components interact 
> how do these authentication files work together? 

3 

Understand the execution flow 
> trace the login process from front-end to database 

Tips: 
Be specific about what you’re looking for 
Use domain language from the project 

=== ​ 

Fix bugs efficiently ===
Suppose you’ve encountered an error message and need to find and fix its source. 

1 

Share the error with Claude 
> I'm seeing an error when I run npm test 

2 

Ask for fix recommendations 
> suggest a few ways to fix the @ts-ignore in user.ts 

3 

Apply the fix 
> update user.ts to add the null check you suggested 

Tips: 
Tell Claude the command to reproduce the issue and get a stack trace 
Mention any steps to reproduce the error 
Let Claude know if the error is intermittent or consistent 

=== ​ 

Refactor code ===
Suppose you need to update old code to use modern patterns and practices. 

1 

Identify legacy code for refactoring 
> find deprecated API usage in our codebase 

2 

Get refactoring recommendations 
> suggest how to refactor utils.js to use modern JavaScript features 

3 

Apply the changes safely 
> refactor utils.js to use ES2024 features while maintaining the same behavior 

4 

Verify the refactoring 
> run tests for the refactored code 

Tips: 
Ask Claude to explain the benefits of the modern approach 
Request that changes maintain backward compatibility when needed 
Do refactoring in small, testable increments 

=== ​ 

Use specialized subagents ===
Suppose you want to use specialized AI subagents to handle specific tasks more effectively. 

1 

View available subagents 
> /agents 

This shows all available subagents and lets you create new ones. 

2 

Use subagents automatically 
Claude Code will automatically delegate appropriate tasks to specialized subagents: 
> review my recent code changes for security issues 

> run all tests and fix any failures 

3 

Explicitly request specific subagents 
> use the code-reviewer subagent to check the auth module 

> have the debugger subagent investigate why users can't log in 

4 

Create custom subagents for your workflow 
> /agents 

Then select “Create New subagent” and follow the prompts to define: 
Subagent type (e.g., api-designer , performance-optimizer ) 
When to use it 
Which tools it can access 
Its specialized system prompt 

Tips: 
Create project-specific subagents in .claude/agents/ for team sharing 
Use descriptive description fields to enable automatic delegation 
Limit tool access to what each subagent actually needs 
Check the subagents documentation for detailed examples 

=== ​ 

Work with tests ===
Suppose you need to add tests for uncovered code. 

1 

Identify untested code 
> find functions in NotificationsService.swift that are not covered by tests 

2 

Generate test scaffolding 
> add tests for the notification service 

3 

Add meaningful test cases 
> add test cases for edge conditions in the notification service 

4 

Run and verify tests 
> run the new tests and fix any failures 